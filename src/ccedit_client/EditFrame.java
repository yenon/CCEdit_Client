/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ccedit_client;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Properties;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;

/**
 *
 * @author Basti
 */
public class EditFrame extends javax.swing.JFrame {

    /**
     * Creates new form EditFrame
     */
    public EditFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenu1 = new java.awt.PopupMenu();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        popupMenu1.setLabel("popupMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                startup(evt);
            }
        });

        jSplitPane1.setDividerLocation(200);

        jTextPane1.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        jScrollPane2.setViewportView(jTextPane1);

        jSplitPane1.setRightComponent(jScrollPane2);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.setRootVisible(false);
        jTree1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTree1MouseClicked(evt);
            }
        });
        jTree1.addTreeWillExpandListener(new javax.swing.event.TreeWillExpandListener() {
            public void treeWillCollapse(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
            }
            public void treeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
                jTree1TreeWillExpand(evt);
            }
        });
        jScrollPane3.setViewportView(jTree1);

        jSplitPane1.setLeftComponent(jScrollPane3);

        jMenu1.setText("File");

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("New");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Save");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Computer");

        jMenuItem1.setText("Set computer");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        jMenuItem2.setText("Refresh");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private String pc, passwd, ip;
    private int port;
    private DefaultMutableTreeNode root;

    public void updatePC() {
        try {
            if (new File(System.getProperty("user.home") + "/yenon/CCEdit_Client/Computer.cfg").isFile()) {
                FileReader fr = new FileReader(new File(System.getProperty("user.home") + "/yenon/CCEdit_Client/Computer.cfg"));
                Properties p = new Properties();
                p.load(fr);
                if (p.containsKey("ID") && p.containsKey("Password")) {
                    pc = p.getProperty("ID");
                    passwd = p.getProperty("Password");
                    Uploader u = new Uploader("ls", pc, "", passwd, "");
                    u.start();
                    if (u.getResponse().startsWith("Error: ") || u.getResponse().startsWith("Exception: ")) {
                        ErrorFrame.main(u.getResponse(), false);
                    } else {
                        root = new DefaultMutableTreeNode("");
                        DefaultMutableTreeNode dir;
                        
                        System.out.println(u.getResponse());
                        jTree1.setModel(null);
                        String in[] = u.getResponse().split("\n");
                        int i = 0;
                        while (i < in.length) {
                            if (in[i].startsWith("(dir)")) {
                                System.out.println(in[i]);
                                in[i] = in[i].substring(5);
                                dir = new DefaultMutableTreeNode(in[i]);
                                dir.add(new DefaultMutableTreeNode("Loading contents..."));
                                root.add(dir);
                            }
                            
                            i++;
                        }
                        i = 0;
                        while (i < in.length) {
                            if (in[i].startsWith("(file)")) {
                                in[i] = in[i].substring(6);
                                dir = new DefaultMutableTreeNode(in[i]);
                                root.add(dir);
                            }
                            i++;
                        }
                        jTree1.setModel(new DefaultTreeModel(root));
                    }
                } else {
                    ErrorFrame.main("Please set your Computer-ID and password under 'File/Set computer'.", false);
                }
                fr.close();
            }
        } catch (IOException ex) {
            ExceptionHandler.handle(true, ex);
        }
    }

    public void updateIP() {
        try {
            if (new File(System.getProperty("user.home") + "/yenon/CCEdit_Client/Server.cfg").isFile()) {
                FileReader fr = new FileReader(new File(System.getProperty("user.home") + "/yenon/CCEdit_Client/Server.cfg"));
                Properties p = new Properties();
                p.load(fr);
                if (p.containsKey("IP") && p.containsKey("Port")) {
                    ip = p.getProperty("IP");
                    port = Integer.parseInt(p.getProperty("Port"));
                } else {
                    ErrorFrame.main("Your Server-Settings were cleared because\nthey couldn't be read. Please restart\nyour client.", true);
                }
                fr.close();
            }
        } catch (IOException ex) {
            ExceptionHandler.handle(true, ex);
        } catch (NumberFormatException ex) {
            ExceptionHandler.handle(true, ex);
        }
    }

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        InputComputerdata.main(this);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void startup(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_startup
        updateIP();
        updatePC();
    }//GEN-LAST:event_startup

    private void jTree1TreeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {//GEN-FIRST:event_jTree1TreeWillExpand
        DefaultMutableTreeNode selectedNode = ((DefaultMutableTreeNode) evt.getPath().getLastPathComponent());
        if (selectedNode.getChildCount() == 1 && "Loading contents...".equals(selectedNode.getChildAt(0).toString())) {
            int i = 0;
            String dir = "";
            TreeNode tp[] = selectedNode.getPath();
            while (i < tp.length) {
                if ("".equals(dir)) {
                    dir = tp[i].toString();
                } else {
                    dir = dir + "/" + tp[i].toString();
                }
                i++;
            }
            System.out.println(dir);
            Uploader u = new Uploader("ls", pc, dir, passwd, "");
            u.start();
            if (u.getResponse().startsWith("Error: ") || u.getResponse().startsWith("Exception: ")) {
                ErrorFrame.main(u.getResponse(), false);
            } else {
                String in[] = u.getResponse().split("\n");
                DefaultMutableTreeNode file;
                selectedNode.removeAllChildren();
                i = 0;
                while (i < in.length) {
                    if (in[i].startsWith("(dir)")) {
                        in[i] = in[i].substring(5);
                        file = new DefaultMutableTreeNode(in[i]);
                        file.add(new DefaultMutableTreeNode("<empty directory>"));
                        selectedNode.add(file);
                    }
                    System.out.println(in[i]);
                    i++;
                }
                i = 0;
                while (i < in.length) {
                    if (in[i].startsWith("(file)")) {
                        in[i] = in[i].substring(6);
                        file = new DefaultMutableTreeNode(in[i]);
                        selectedNode.add(file);
                    }
                    i++;
                }
                if (selectedNode.getChildCount() == 0) {
                    selectedNode.add(new DefaultMutableTreeNode("<empty directory>"));
                }
            }
        }
    }//GEN-LAST:event_jTree1TreeWillExpand

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        updatePC();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jTree1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree1MouseClicked
        if (jTree1.getSelectionPath() != null) {
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTree1.getSelectionPath().getLastPathComponent();
            if (evt.getClickCount() == 2 && selectedNode.isLeaf() && !"<empty directory>".equals(selectedNode.toString())) {
                int i = 0;
                String dir = "";
                TreeNode tp[] = selectedNode.getPath();
                while (i < tp.length) {
                    if ("".equals(dir)) {
                        dir = tp[i].toString();
                    } else {
                        dir = dir + "/" + tp[i].toString();
                    }
                    i++;
                }
                Uploader u = new Uploader("get", pc, dir, passwd, "");
                u.start();
                if (u.getResponse().startsWith("Error: ") || u.getResponse().startsWith("Excpetion: ")) {
                    ErrorFrame.main(u.getResponse(), false);
                } else {
                    jTextPane1.setText(u.getResponse());
                }
            }
        }
    }//GEN-LAST:event_jTree1MouseClicked

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        if (jTree1.getSelectionPath() != null) {
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTree1.getSelectionPath().getLastPathComponent();
            if (selectedNode.isLeaf() && !"<empty directory>".equals(selectedNode.toString())) {
                int i = 0;
                String dir = "";
                TreeNode tp[] = selectedNode.getPath();
                while (i < tp.length) {
                    if ("".equals(dir)) {
                        dir = tp[i].toString();
                    } else {
                        dir = dir + "/" + tp[i].toString();
                    }
                    i++;
                }
                Uploader u = new Uploader("put", pc, dir, passwd, jTextPane1.getText());
                u.start();
                if (u.getResponse().startsWith("Error: ") || u.getResponse().startsWith("Excpetion: ")) {
                    ErrorFrame.main(u.getResponse(), false);
                }
            }
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        if(jTree1.getSelectionPath()!=null){
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTree1.getSelectionPath().getLastPathComponent();
            int i = 0;
                String dir = "";
                TreeNode tp[] = selectedNode.getPath();
                while (i < tp.length && !tp[i].isLeaf()) {
                    if ("".equals(dir)) {
                        dir = tp[i].toString();
                    } else {
                        dir = dir + "/" + tp[i].toString();
                    }
                    i++;
                }
            NewFileFrame.main(this,pc,passwd,dir);
        }else{
            NewFileFrame.main(this,pc,passwd,"");
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new EditFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTree jTree1;
    private java.awt.PopupMenu popupMenu1;
    // End of variables declaration//GEN-END:variables
}
